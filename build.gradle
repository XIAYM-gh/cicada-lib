import net.fabricmc.loom.task.RemapJarTask
plugins {
	id 'fabric-loom' version '1.8-SNAPSHOT'
	id 'maven-publish'
	id "me.modmuss50.mod-publish-plugin" version "0.4.4"
	id "dev.kikugie.j52j" version "1.0"
	id 'com.github.johnrengelman.shadow' version '7.0.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = property('mod.name')
version = "${property('mod.version')}+${property('mod.jarname_target')}"
group = property('mod.maven_group')

sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

configurations {
	shade
}

loom {
//	runConfigs.client.ideConfigGenerated = true
//	runConfigs.server.ideConfigGenerated = true

	runs {
		testmodClient {
			client()
			name = "Testmod Client"
			source sourceSets.testmod
		}
		testmodServer {
			server()
			name = "Testmod Server"
			source sourceSets.testmod
		}
	}
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven {
		url "https://maven.enjarai.dev/releases"
	}
	maven {
		url "https://maven.enjarai.dev/mirrors"
	}
}

def mcVersion = hasProperty('deps.mc') ? property('deps.mc') : stonecutter.current.version

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${mcVersion}"
	mappings "net.fabricmc:yarn:${property('deps.yarn')}:v2"
	modImplementation "net.fabricmc:fabric-loader:${property('deps.fabric_loader')}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${property('deps.fabric_api')}"

	shade(api("io.github.spair:imgui-java-binding:${property('deps.imgui')}"))
	shade(api("io.github.spair:imgui-java-lwjgl3:${property('deps.imgui')}") {
		exclude group: "org.lwjgl"
	})
	shade(api("io.github.spair:imgui-java-natives-windows:${property('deps.imgui')}"))
	shade(api("io.github.spair:imgui-java-natives-linux:${property('deps.imgui')}"))
	shade(api("io.github.spair:imgui-java-natives-macos:${property('deps.imgui')}"))

	testmodImplementation sourceSets.main.output
}

processResources {
	filesMatching("fabric.mod.json") {
		expand 'mod_version': version, 'target_minecraft': project.property('mod.target')
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	// Store in temporary folder instead of outputting directly
	destinationDirectory = file("${buildDir}/tmp/thinJar")
}

shadowJar {
//	// Store in temporary folder instead of outputting directly
//	destinationDirectory = file("${buildDir}/tmp/allJar")
//	// Only shade dependencies not provided by Minecraft/FAPI/FLoader
//	configurations = [project.configurations.shade]
//	relocate 'imgui', 'nl.enjarai.cicada.imgui'
//	relocate 'io.imgui', 'nl.enjarai.cicada.io.imgui'
//
//	//Exclude META-INF entries of shaded deps
//	exclude('META-INF/**')
//	// include() upsets shadow, so use from() instead
//	from('LICENSE.md', 'NOTICE.txt')
//	from('licenses') {
//		into('licenses')
//	}
	configurations = [project.configurations.shade]
//	classifier 'shadow-dev'
	dependencies {
		exclude(dependency('org.lwjgl:lwjgl'))
		exclude(dependency('org.lwjgl:lwjgl-glfw'))
		exclude(dependency('org.lwjgl:lwjgl-opengl'))
	}
}

remapJar {
	dependsOn shadowJar
	input = shadowJar.archivePath
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	repositories {
		maven {
			name = "enjaraiMaven"
			url = "https://maven.enjarai.dev/releases"
			credentials(PasswordCredentials)
			authentication {
				basic(BasicAuthentication)
			}
		}
	}

	publications {
		mavenJava(MavenPublication) {
			groupId = group
			artifactId = archivesBaseName
			version = version

			from components.java
		}
	}
}

// Create a task to collect the completed jars in the root project's build/libs folder.
def collectJars = tasks.register("collectJars", Copy) {copy ->

	def task = tasks.getByName("remapJar")

	dependsOn(task)

	copy.from task
	copy.into rootProject.buildDir.path + "/libs"
}

// Set up assemble to depend on the collectJars task, so it gets run on build.
assemble {
	dependsOn(collectJars)
}

if (stonecutter.current.isActive()) {
	loom.runConfigs.testmodClient.ideConfigGenerated = true
	loom.runConfigs.client.ideConfigGenerated = true

	rootProject.tasks.register('buildActive') {
		setGroup 'project'

		dependsOn tasks.getByName('build')
	}
}

publishMods {
	file = remapJar.archiveFile
	displayName = "${property('mod.version')} for ${property('mod.target_nice')}"
	version = project.version
	changelog = ""
	type = STABLE
	modLoaders.add("fabric")

	def min = property('mod.target_min')
	def max = property('mod.target_max')

	if (providers.gradleProperty('enjaraiModrinthToken').present) {
		modrinth {
			projectId = property('mod.modrinth')
			accessToken = providers.gradleProperty('enjaraiModrinthToken').get()

			if (min == max) {
				minecraftVersions.add(min)
			} else {
				minecraftVersionRange {
					start = min
					end = max
				}
			}

			requires {
				slug = "fabric-api"
			}
		}
	}

	if (providers.gradleProperty('enjaraiCurseforgeToken').present) {
		curseforge {
			projectId = property('mod.curseforge')
			accessToken = providers.gradleProperty('enjaraiCurseforgeToken').get()

			if (min == max) {
				minecraftVersions.add(min)
			} else {
				minecraftVersionRange {
					start = min
					end = max
				}
			}

			requires {
				slug = "fabric-api"
			}
		}
	}

	if (providers.gradleProperty('enjaraiGithubToken').present) {
		github {
			repository = property('mod.github')
			accessToken = providers.gradleProperty('enjaraiGithubToken').get()

			commitish = "master" // property('git_branch')
			tagName = project.version
		}
	}
}

tasks.register('publishAll') {
	group 'publishing'
	dependsOn 'publish'
	dependsOn 'publishMods'
}